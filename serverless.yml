service: cache-service
frameworkVersion: '3'
plugins:
  - serverless-offline
  - serverless-python-requirements
custom:
  pythonRequirements:
    dockerImage: public.ecr.aws/sam/build-python3.12
    dockerizePip: 'non-linux'
    dockerRunCmdExtraArgs: ['--platform', 'linux/amd64']
    layer: true
functions:
  app:
    environment:
      APP_NAME: ${env:APP_NAME}
      APP_TIMEZONE: ${env:APP_TIMEZONE}
      DEBUG: ${env:DEBUG}
      LOG_LEVEL: DEBUG
      POWERTOOLS_LOGGER_LOG_EVENT: true
      POWERTOOLS_METRICS_NAMESPACE: cache
      POWERTOOLS_SERVICE_NAME: cache-service
      STAGE: ${env:STAGE}
    events:
      - httpApi: '*'
    handler: app.main.handler
    layers:
      - arn:aws:lambda:${aws:region}:017000801446:layer:AWSLambdaPowertoolsPythonV2:73
      - Ref: PythonRequirementsLambdaLayer
package:
  patterns:
    - '!.DS_Store'
    - '!.coverage'
    - '!.env'
    - '!.git/**'
    - '!.idea/**'
    - '!.pytest_cache/**'
    - '!.serverless/**'
    - '!.serverless_plugins/**'
    - '!.terraform/**'
    - '!.terraform.lock.hcl'
    - '!.venv/**'
    - '!coverage.xml'
    - '!htmlcov/**'
    - '!node_modules/**'
provider:
  name: aws
  architecture: x86_64
  memorySize: 512
  region: ${env:AWS_REGION, 'eu-central-1'}
  runtime: python3.12
  stage: ${opt:stage, 'dev'}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:Query
          Resource:
            - !GetAtt cacheTable.Arn
resources:
  Resources:
    cacheTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-cache
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
useDotenv: true
